import{_ as a,c as t,b as s,o as c}from"./app-B3Ymq__w.js";const o="/blanc-ui_docs/images/concepts_pic_1.jpg",i="/blanc-ui_docs/images/concepts_pic_2.jpg",n="/blanc-ui_docs/images/concepts_pic_4.jpg",r="/blanc-ui_docs/images/concepts_pic_3.jpg",l={};function p(d,e){return c(),t("div",null,e[0]||(e[0]=[s('<h1 id="концепция-инструмента" tabindex="-1"><a class="header-anchor" href="#концепция-инструмента"><span>Концепция инструмента</span></a></h1><h2 id="проблема" tabindex="-1"><a class="header-anchor" href="#проблема"><span>Проблема</span></a></h2><p>На данный момент не существует ни одной библиотеки готовых компонентов, на основе которой можно было бы без проблем реализовать уникальный дизайн-макет. Из существующих unstyled UI Kit очень мало добра и все они сделаны под React. Под Vue я вообще не встречал ни одного UI Kit, который можно было бы назвать unstyled. Все они прекрасно подходят для реализации админ-панелей и прочего внутреннего бизнес-инструментария. Когда же мы садимся писать интерфейс с уникальным дизайном, начинается пляска с костылями. Приходится извращаться с наложением стилей и жёсткими переопределениями, не сулящими ничего хорошего.<br><img src="'+o+'" alt="css joke"><br> Ещё один неприятный нюанс - многие библиотеки для реализации части компонентов забирают их пакетами из других библиотек. Если разработчику нужно изменить стайлинг или логику какой-то глубоко вложенной внутренней части - приходится забирать в свой проект целую пачку модулей и кастомизировать у себя, разбираясь с зависимостями.<br> Это уже не говоря о раздутом весе модуля, от которого не спасает даже tree-shaking. Установка какой-нибудь помойки а-ля Ant Design может легко раздуть размер вашего бандла до мегабайта в несжатом виде.<br><img src="'+i+'" alt="dependencies joke"><br> Избежать этих проблем на данный момент реально только одним действенным способом - писать все компоненты самостоятельно с нуля. Из раза в раз. С каждым новым проектом. <img src="'+n+'" alt="sad joke"></p><h2 id="идея" tabindex="-1"><a class="header-anchor" href="#идея"><span>Идея</span></a></h2><p>Главная идея, основой которой послужила эта библиотека - реализация абсолютной возможности рестайлинга компонентов интерфейса, частичной возможности изменения структуры и логики.<br> Дополнительная идея - вложить в библиотеку обвязку для удобного взаимодействия с компонентами.<br> Логика компонентов минималистична, как и сами компоненты. Её основная задача - правильно скомбинировать взаимодействия между вариантами стилей для реализации любого, даже самого упоротого, не поддающегося никаким закономерностям дизайна.<br><img src="'+r+'" alt="designers joke"><br> Самих компонентов не будет много, их количество зависит только от логики их работы. Если логика компонентов идентична - поскльку стайлинг и структуру разработчик может переопределить - повторяться нет смысла. Например Checkbox и Toggle, Modal и Drawer - отличаются только стайлингом. В библиотеке есть Checkbox, а значит его базе можно собрать Toggle.</p><h2 id="реализация" tabindex="-1"><a class="header-anchor" href="#реализация"><span>Реализация</span></a></h2><p>В каждом компоненте есть 2 типа свойств - базовые и стилевые. Базовые всем вам хорошо известны - value, onChange итп. Стилевые - это свойства, которые определяют стили и их модификаторы. Их просто отличить - они заканчиваются на style и variants. Практически каждый элемент компонента подчинён этим свойствам. Некоторые отдельные части компонентов можно подменить на свои. Жёстко выставлена лишь абстрактная логика компонента, поэтому она минималистична и расширяема.</p><blockquote><p>Модули выходят для двух самых популярных инструментов, но первоочередно новый модуль реализуется для Vue, просто потому он нравится мне больше чем React. После обкатки в storybook и тестовых песочницах модуль имплементируется для React.</p></blockquote><p>На данный момент для Vue готово примерно 3/4 запланированного. Для React - половина.<br> Первый полноценный релиз для использования в prod пларинуется в июле 2025 года.</p>',9)]))}const h=a(l,[["render",p],["__file","index.html.vue"]]),_=JSON.parse('{"path":"/concepts/","title":"Концепция инструмента","lang":"ru-RU","frontmatter":{},"headers":[{"level":2,"title":"Проблема","slug":"проблема","link":"#проблема","children":[]},{"level":2,"title":"Идея","slug":"идея","link":"#идея","children":[]},{"level":2,"title":"Реализация","slug":"реализация","link":"#реализация","children":[]}],"git":{"updatedTime":1740650559000,"contributors":[{"name":"Bejoy","username":"Bejoy","email":"casperyourweb@gmail.com","commits":2,"url":"https://github.com/Bejoy"},{"name":"Bejoy","username":"Bejoy","email":"firekit13@gmail.com","commits":1,"url":"https://github.com/Bejoy"}]},"filePathRelative":"concepts/readme.md"}');export{h as comp,_ as data};
